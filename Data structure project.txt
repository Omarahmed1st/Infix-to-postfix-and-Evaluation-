#include <iostream>
#include <stack>
#include <string>
#include <cctype>
#include <cmath>
using namespace std;

float MathOperation(float opr1, float opr2, char op) {
    if (op == '+')
        return opr1 + opr2;
    else if (op == '-')
        return opr1 - opr2;
    else if (op == '*')
        return opr1 * opr2;
    else if (op == '/')
        return opr1 / opr2;
        
        
        else if (op == '^') 
        return pow(opr1, opr2);
    
        return 0;
}

float postfix_evaluation(string exp) {
    stack<float> st;
    int num = 0;
    bool isNum = false;
    for (int i = 0; i < exp.length(); i++) {
        if (isdigit(exp[i])) {
            num = num * 10 + (exp[i] - '0');
            isNum = true;
        } else {
            if (isNum) {
                st.push(num);
                num = 0;
                isNum = false;
            }
            if (exp[i] != ' ') {
                float opr2 = st.top();
                st.pop();
                float opr1 = st.top();
                st.pop();
                float result = MathOperation(opr1, opr2, exp[i]);
                st.push(result);
            }
        }
    }
    return st.top();
}


int priority(char op) {
    if (op == '+' || op == '-')
        return 1;
    else if (op == '*' || op == '/')
        return 2;
    else if (op == '^')
        return 3;
    else
        return 0;
}

string infix_to_postfix(string exp) {
    stack<char> st;
    string output = "";
    for (int i = 0; i < exp.length(); i++) {
        if (exp[i] == ' ')
            continue;
        if (isdigit(exp[i])) {
            // Read the entire number and append it to the output
            while (i < exp.length() && isdigit(exp[i])) {
                output += exp[i];
                i++;
            }
            // Move i back by one to correctly handle the next character
            i--;
            output += ' '; // Add a space to separate numbers
        } else if (isalpha(exp[i])) {
            output += exp[i];
            output += ' ';
        } else if (exp[i] == '(')
            st.push('(');
        else if (exp[i] == ')') {
            while (st.top() != '(') {
                output = output + st.top();
                st.pop();
            }
            st.pop();
        } else if (exp[i] == '^') { 
            st.push('^');
        } else {
            while (!st.empty() && priority(exp[i]) <= priority(st.top())) {
                output = output + st.top();
                st.pop();
            }
            st.push(exp[i]);
        }
    }
    while (!st.empty()) {
        output += st.top();
        st.pop();
    }
    return output;
}



int main() {
    int choice;
    string infixExpression, postfixExpression;
    bool flag = true;
    while(flag){
        cout << "choose one operation\n" ;
    cout << "1. Infix to Postfix" << endl;
    cout << "2. Postfix Evaluation" << endl;
    cout << "3. Exit\n" ;
        cin >> choice;
    switch (choice) {
        case 1:
            cout << "Enter the infix expression: ";
            cin.ignore(); // to clear the newline character from the input buffer
            getline(cin, infixExpression);
            cout << "Infix to Postfix: " << infix_to_postfix(infixExpression) << endl;
            break;
        case 2:
            cout << "Enter the postfix expression: \n";
            cin.ignore(); // to clear the newline character from the input buffer
            getline(cin, postfixExpression);
            cout << "Postfix Evaluation: " << postfix_evaluation(postfixExpression) << endl;
            break;
            case 3:
            cout<< "Thanks for viewing this code :')";
            flag = false;
            break;
        default:
            cout << "Invalid choice! Please enter either 1 or 2." << endl;
            break;
    }
    }
    return 0;
}